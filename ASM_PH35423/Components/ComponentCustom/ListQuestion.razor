@page "/ListQuestion/{IdExam:guid}"

@inject IDialogService DialogService
@inject IHttpClientFactory HttpClientFactory
@inject ISnackbar Snackbar
@inject NavigationManager Navigation


@if (Questions == null)
{
    <LoadingLocal></LoadingLocal>
}
else
{
    <MudGrid Class="mt-3 mb-5">
        <MudItem Style="margin : auto" xs="12" sm="9">
            <MudCard>
                <MudPaper Class="d-flex justify-end me-4" Elevation="0">
                    <MudTooltip Text="Thêm mới">
                        <MudFab @onclick="AddQuestionHandle" Class="my-8" EndIcon="@Icons.Material.Filled.Add" Color="Color.Success" />
                    </MudTooltip>
                </MudPaper>
                <MudDivider DividerType="DividerType.Middle" Light="true" Class="mb-8" />
                @if (Questions.Count == 0)
                {
                    <MudAlert Style="width : 550px;" Class="ms-4" Severity="Severity.Info" Variant="Variant.Filled">Chưa có câu hỏi nào</MudAlert>
                }
                <MudCardContent>
                    @foreach (var item in Questions)
                    {
                        <p>
                            <a class="my-4" href="/EditQuestion/@item.IdQuestion">@item.IdQuestion</a>
                            <MudButton @onclick="() => DeleteQuestionHandle(item.IdQuestion)" Variant="Variant.Filled" Color="Color.Error">Xóa</MudButton>
                        </p>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>


    </MudGrid>
}




@code {
    [Parameter]
    public Guid IdExam { get; set; }

    Guid IdQuestion { get; set; }

    List<Question> Questions { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await LoadQuestion();
    }
    protected async Task AddQuestionHandle()
    {
        Navigation.NavigateTo("/EditQuestion/" + IdExam + "/Create");
    }

    async Task DeleteQuestionHandle(Guid id)
    {
        var parameters = new DialogParameters<Dialog>();
        parameters.Add(x => x.ContentText, "Bạn chắc chắn xóa bài câu hỏi này ?");
        parameters.Add(x => x.ButtonText, "Xóa");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };



        var result = await DialogService.Show<Dialog>("Xác nhận xóa", parameters, options).Result;
        if (result.Data != null)
        {
            if ((bool)result.Data)
            {
                var _http = HttpClientFactory.CreateClient("MyHttpClient");
                var data = await _http.DeleteAsync("/DeleteQuestion/" + id);
                Snackbar.Add("Xóa câu hỏi thành công", Severity.Success);
                Questions = null;
                await LoadQuestion();
            }
        }
    }
    async Task LoadQuestion()
    {
        var _httpClient = HttpClientFactory.CreateClient("MyHttpClient");
        var response = await _httpClient.GetAsync($"/GetQuestions/{IdExam}");

        if (response.IsSuccessStatusCode)
        {
            Questions = JsonConvert.DeserializeObject<List<Question>>(await response.Content.ReadAsStringAsync());
        }
    }

}
