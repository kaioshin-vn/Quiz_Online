@page "/ListResultExam"
@using ASM_PH35423.Components.ComponentCustom
@using ASM_PH35423.Data
@using ASM_PH35423.Data.DTO
@using ASM_PH35423.Data.Tables
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Newtonsoft.Json

@attribute [Authorize(Roles = "Teacher,Admin")]


@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject IHttpClientFactory HttpClientFactory
@inject ISnackbar Snackbar

@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider


@if (ListHistory == null)
{
    <Loading></Loading>
}
else
{
    <MudContainer MaxWidth="MaxWidth.Large">
        <MudPaper Class="d-flex justify-end my-4" Elevation="0">
            <MudTooltip Text="Thêm mới">
                <MudFab @onclick="AddExamHandle" EndIcon="@Icons.Material.Filled.Add" Color="Color.Secondary" />
            </MudTooltip>
        </MudPaper>
        @if (ListHistory.Count == 0)
        {
            <MudAlert Style="width : 550px;" Severity="Severity.Info" Variant="Variant.Filled">Bạn chưa tạo bài thi nào, tạo bài thi mới <NavLink href="/StoreExam"><span style="text-decoration:underline;">Tại đây</span></NavLink></MudAlert>
        }
        else
        {
            foreach (var item in ListHistory)
            {
                <MudPaper Elevation="3" Class="d-flex justify-content-between align-items-center my-6 p-4">
                    <MudImage Src="@item.Img" Alt="Mony the dog" Class="" Height="120" />
                    <div>
                        <h3>
                            @item.Title
                        </h3>
                        <p>Số người tham gia  : <i>@item.PeopleCount</i></p>
                    </div>
                    <div>
                        @if (item.PeopleCount != 0)
                        {
                            <MudButton Class=" my-3" @onclick=" () => See(item.Id)" EndIcon="@Icons.Material.Filled.Details" Variant="Variant.Filled" Color="Color.Tertiary">
                                Chi tiết
                            </MudButton>
                        }
                    </div>
                </MudPaper>
            }
        }
    </MudContainer>
}
@code {
    List<ExamResult> ListHistory;

    Guid id;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var userCurrent = await UserManager.GetUserAsync(user);
        var idUser = userCurrent.Id;



        var _http = HttpClientFactory.CreateClient("MyHttpClient");
        var data = await _http.GetStringAsync($"/GetListResultExam/{idUser}");

        ListHistory = JsonConvert.DeserializeObject<List<ExamResult>>(data);
    }
    void See(Guid id)
    {
        Navigation.NavigateTo("/ResultExam/" + id);
    }

    private async Task AddExamHandle()
    {

    }

    private async Task DeleteExamHandle(Guid id)
    {
        var parameters = new DialogParameters<Dialog>();
        parameters.Add(x => x.ContentText, "Bạn chắc chắn xóa bài kiểm tra này ?");
        parameters.Add(x => x.ButtonText, "Xóa");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

    }

    private async Task LoadExam()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var userCurrent = await UserManager.GetUserAsync(user);
        var idUser = userCurrent.Id;

        var _httpClient = HttpClientFactory.CreateClient("MyHttpClient");
        var response = await _httpClient.GetAsync($"/GetExams/{idUser}");


    }


}