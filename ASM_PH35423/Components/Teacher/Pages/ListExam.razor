@page "/StoreExam"
@using ASM_PH35423.Components.ComponentCustom
@using ASM_PH35423.Data
@using ASM_PH35423.Data.DTO
@using ASM_PH35423.Data.Tables
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Newtonsoft.Json

@attribute [Authorize(Roles = "Teacher,Admin")]


@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject IHttpClientFactory HttpClientFactory
@inject ISnackbar Snackbar

@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider


@if (ListExams == null)
{
    <Loading></Loading>
}
else
{
    <MudContainer MaxWidth="MaxWidth.Large">
        <MudPaper Class="d-flex justify-end my-4" Elevation="0">
            <MudTooltip Text="Thêm mới">
                <MudFab @onclick="AddExamHandle" EndIcon="@Icons.Material.Filled.Add" Color="Color.Secondary" />
            </MudTooltip>
        </MudPaper>
        @if (ListExams.Count == 0)
        {
            <MudAlert Style="width : 550px;" Severity="Severity.Info" Variant="Variant.Filled">Bạn chưa có bài thi nào</MudAlert>
        }
        else
        {
            foreach (var item in ListExams)
            {
                <MudPaper Elevation="3" Class="d-flex justify-content-between align-items-end my-6 p-4">
                    <MudImage Src="@item.Img" Alt="Mony the dog" Class="" Height="180" />
                    <div>
                        <h3>@item.Title</h3>
                        <p>Mô tả : <b>@item.Descripton</b></p>
                        <p>Thể loại : <b>@item.Type</b></p>
                        <MudText Class="mt-2">Ngày tạo : <span style="color:green">@item.CreateDate.Day-@item.CreateDate.Month-@item.CreateDate.Year</span></MudText>

                    </div>
                    <div>
                        <MudButton Class="d-block my-3 " @onclick =" () => Navigate(item.Id)" Variant="Variant.Filled"  Color="Color.Secondary">
                            Chỉnh sửa
                        </MudButton>
                        <MudButton Class="d-block" @onclick="() => DeleteExamHandle(item.Id)" Variant="Variant.Filled" Color="Color.Error">Xóa</MudButton>
                    </div>
                </MudPaper>
            }
        }
    </MudContainer>
}
@code {
    List<Exam> ListExams;

    Guid id;

    protected override async Task OnInitializedAsync()
    {
        await LoadExam();
    }

    void Navigate (Guid id )
    {
        Navigation.NavigateTo("/Exam/" + id);
    }

    private async Task AddExamHandle()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var userCurrent = await UserManager.GetUserAsync(user);
        var idUser = userCurrent.Id;



        var _http = HttpClientFactory.CreateClient("MyHttpClient");
        var data = await _http.PostAsJsonAsync("/AddExam", idUser);

        if (data.IsSuccessStatusCode)
        {
            var strId = await data.Content.ReadAsStringAsync();
            var idExam = Guid.Parse(strId.Trim('"'));
            Navigation.NavigateTo("/Exam/" + idExam);
        }
    }

    private async Task DeleteExamHandle(Guid id)
    {
        var parameters = new DialogParameters<Dialog>();
        parameters.Add(x => x.ContentText, "Bạn chắc chắn xóa bài kiểm tra này ?");
        parameters.Add(x => x.ButtonText, "Xóa");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };



        var result = await DialogService.Show<Dialog>("Xác nhận xóa", parameters, options).Result;
        if (result.Data != null)
        {
            if ((bool)result.Data)
            {
                var _http = HttpClientFactory.CreateClient("MyHttpClient");
                var data = await _http.DeleteAsync("/DeleteExam/" + id);
                Snackbar.Add("Xóa bài thi thành công", Severity.Success);
                ListExams = null;

                await LoadExam();
            }
        }

    }

    private async Task LoadExam()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var userCurrent = await UserManager.GetUserAsync(user);
        var idUser = userCurrent.Id;

        var _httpClient = HttpClientFactory.CreateClient("MyHttpClient");
        var response = await _httpClient.GetAsync($"/GetExams/{idUser}");

        if (response.IsSuccessStatusCode)
        {
            ListExams = JsonConvert.DeserializeObject<List<Exam>>(await response.Content.ReadAsStringAsync());
        }
    }


}