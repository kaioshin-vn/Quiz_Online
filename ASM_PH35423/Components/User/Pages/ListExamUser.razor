@page "/ListExamUser"
@using ASM_PH35423.Components.ComponentCustom
@using ASM_PH35423.Data
@using ASM_PH35423.Data.DTO
@using ASM_PH35423.Data.Tables
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Newtonsoft.Json

@attribute [Authorize(Roles = "Student")]


@inject IDialogService DialogService
@inject IHttpClientFactory HttpClientFactory
@inject ISnackbar Snackbar

@inject NavigationManager Navigation
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider


@if (ListExams == null)
{
    <Loading></Loading>
}
else
{
    <MudContainer MaxWidth="MaxWidth.Large">
        <MudPaper Class="d-flex justify-end my-4" Elevation="0">

        </MudPaper>
        @if (ListExams.Count == 0)
        {
            <MudAlert Style="width : 550px;" Severity="Severity.Info" Variant="Variant.Filled">Hiện chưa có bài thi nào</MudAlert>
        }
        else
        {
            foreach (var item in ListExams)
            {

                var _httpClien = HttpClientFactory.CreateClient("MyHttpClient");
                var respons = _httpClien.GetStringAsync($"/GetToTalQuestion/" + item.Id).Result;
                var totalQues = Convert.ToInt16(respons);
                if (totalQues != 0)
                {
                    <MudPaper Elevation="3" Class="d-flex justify-content-between align-items-end my-6 p-4">
                        <MudImage Src="@item.Img" Alt="Mony the dog" Class="" Height="180" />
                        <div>
                            <h3>@item.Title</h3>
                            <p>Mô tả : <b>@item.Descripton</b></p>

                            <p>Số lượng : <b>@respons câu</b></p>
                            <MudText Class="mt-2">Thời gian : <span style="color:green">@item.Time phút</span></MudText>

                        </div>
                        <div>
                            <MudButton Class=" my-3" @onclick=" () => TryExam(item.Id)" EndIcon="@Icons.Material.Filled.DocumentScanner" Variant="Variant.Filled" Color="Color.Info">
                                Vào thi
                            </MudButton>
                        </div>
                    </MudPaper>
                }
            }
        }
    </MudContainer>
}
@code {
    List<Exam> ListExams;

    Guid id;

    protected override async Task OnInitializedAsync()
    {
        await LoadExam();
    }

    async Task TryExam(Guid id)
    {
        var parameters = new DialogParameters<Dialog>();
        parameters.Add(x => x.ContentText, "Bạn chắc chắn muốn vào thi ?");
        parameters.Add(x => x.ButtonText, "Vào thi");
        parameters.Add(x => x.Color, Color.Tertiary);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };



        var result = await DialogService.Show<Dialog>("Xác nhận thi", parameters, options).Result;
        if (result.Data != null)
        {
            if ((bool)result.Data)
            {
                Navigation.NavigateTo("/ExamEntry/" + id);
            }
        }
    }

    private async Task LoadExam()
    {
        var _httpClient = HttpClientFactory.CreateClient("MyHttpClient");
        var response = await _httpClient.GetAsync($"/GetAllExams");

        if (response.IsSuccessStatusCode)
        {
            ListExams = JsonConvert.DeserializeObject<List<Exam>>(await response.Content.ReadAsStringAsync());
        }
    }


}